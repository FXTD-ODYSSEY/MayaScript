//==============================================================//
//                   MGtools - Path tracker
//==============================================================//
//Author: Miguel (Wenfeng Gao) 
//website: http://mgland.com
//Feedback: http://mgland.com/MGtools_en.html?url=Feedback
//E-mail: mgtoolspro@gmail.com 
//CopyRight Miguel @ mgland animation studio.
//==============source codes if necessary=========================


// begin path tracker UI code=============================================
global proc MG_pathTracker ()
{
    MG_ensureMGToolsPluginLoaded;
	//MGTools -queryEnable acceptVersionDouble acceptStudent acceptTrial acceptExpired
  if(!`MGTools -queryEnable 3.0 1 1 0`)
  {
    MG_WarnFeatureNotAvailableDueToLicense;
    return;
  }
  
	global float $MGTools_BGColor_gray [];
	global int $MGTools_2011_orNot;
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
	if (`window -exists MG_pathTracker_UI`){deleteUI MG_pathTracker_UI;}
	window -mxb 0  -title `MG_DualLan "pathTracker.title"` 
		-in `MG_DualLan "pathTracker.title"`   MG_pathTracker_UI;
		string $mainF = `formLayout`;
	rowLayout -nc 3 -cw3 65 5 220 -cl3 "center" "center" "center" -adj 3 MG_pathTracker_topRL;
		gridLayout -aec 0 -nc 3 -cw 20 -ch 20 -w 62;
			$icon=`MG_getShelfIcon "MGdbManager_imagePV_add.bmp"`;
			//$Hicon=`MG_getShelfIcon "MGdbManager_imagePV_add_h.bmp"`;
			$ann=`MG_DualLan "pathTracker.add.ann"`;
			string $addBtn=`iconTextButton -w 20 -h 20 
							-mw 0 -mh 0 
							-bgc $MGTools_BGColor_gray[0] $MGTools_BGColor_gray[1] $MGTools_BGColor_gray[2] 
							-i $icon //-hi $Hicon 
							-ann $ann
							-c "MG_pathTracker_addItem"`;
			
			$icon=`MG_getShelfIcon mgshelf_v2_trashIcon.bmp`;
			//$Hicon=`MG_getShelfIcon mgshelf_v2_trashIcon.bmp`;
			$ann=`MG_DualLan "pathTracker.del.ann"`;
			string $delBtn=`iconTextButton 
								-w 20 -h 20 
								-bgc $MGTools_BGColor_gray[0] $MGTools_BGColor_gray[1] $MGTools_BGColor_gray[2] 
								-mw 0 -mh 0 
								-i $icon //-hi $Hicon 
								-ann $ann
								-c "MG_pathTracker_delItem"`;
			
			$icon=`MG_getShelfIcon MGdbManager_refresh.bmp`;
			//$Hicon=`MG_getShelfIcon MGdbManager_refresh_en_h.bmp`;
			$ann=`MG_DualLan "pathTracker.refresh.ann"`;
			string $refreshBtn=`iconTextButton 
								-w 20 -h 20 
								-mw 0 -mh 0 
								-bgc $MGTools_BGColor_gray[0] $MGTools_BGColor_gray[1] $MGTools_BGColor_gray[2] 
								-i $icon 
								//-hi $Hicon 
								-ann $ann
								-c "MG_pathTracker_manualUpdate"`;	
								

			setParent..;
			
	separator -hr 0 -h 22 -st "in";
	
	if($MacOSBefore2011||$LinuxBefore2011) rowLayout -nc 5 -cw5 24 1 22 20 20 -cl5 "right" "center" "left" "center" "center" -adj 2;
	else rowLayout -nc 5 -cw5 20 1 22 20 20 -cl5 "right" "center" "left" "center" "center" -adj 2;
			$icon=`MG_getShelfIcon smallCam_Icons.bmp`;	
			$hicon=`MG_getShelfIcon smallCam_Icons_h.bmp`;			
			$ann=`MG_DualLan "pathTracker.camOnoff.ann"`;
			string $camBtn=`iconTextCheckBox
								-w 20 -h 20 
								-bgc $MGTools_BGColor_gray[0] $MGTools_BGColor_gray[1] $MGTools_BGColor_gray[2] 
								-mw 0 -mh 0 
								-i $icon
								-si $hicon
								-cc "MG_pathTracker_UISetOtherCommand 1"
								-v 0
								-ann $ann
								MG_pathTracker_lickCamCB`;	
			textField -ed 0 
					-ann `MG_DualLan "pathTracker.camtf.ann"`
					MG_pathTracker_camTF;
			button -l "<" -w 20 
					-ann `MG_DualLan "pathTracker.camInput.ann"`
					-c "MG_pathTracker_addInAttachCam";	
					
			$icon=`MG_getShelfIcon refreshUI_Icon.bmp`;			
			$ann=`MG_DualLan "relocator.refresh"`;
			string $refreshUIBtn=`iconTextButton 
								-w 20 -h 20 
								-mw 0 -mh 0 
								-bgc $MGTools_BGColor_gray[0] $MGTools_BGColor_gray[1] $MGTools_BGColor_gray[2] 
								-i $icon 
								//-hi $Hicon 
								-ann $ann
								-c "MG_pathTracker_updateUI"`;

															
			$icon=`MG_getShelfIcon MGdbManager_imagePV_help.bmp`;
			//$Hicon=`MG_getShelfIcon MGdbManager_imagePV_help_h.bmp`;
			$ann=`MG_DualLan "MGtools.mi.help.anno"`;
			string $helpBtn=`iconTextButton
								-w 20 -h 20 
								-bgc $MGTools_BGColor_gray[0] $MGTools_BGColor_gray[1] $MGTools_BGColor_gray[2] 
								-mw 0 -mh 0 
								-i $icon //-hi $Hicon 
								-ann $ann
								-c "MGtoolsHelp \"pathtracker.htm\""
								`;
	setParent $mainF;
	//rowLayout -nc 4 -cw4 140 30 30 30 -cl4 "center" "center" "center" "center" MG_pathTracker_listRL;
		$lbl=`MG_DualLan "pathTracker.tracknode.lbl"`;
		string $text01=`text -l $lbl` ;
		int $tslWidthSmall = 22;
		if($MacOSBefore2011||$LinuxBefore2011)$tslWidthSmall = 42;
		textScrollList 
			-ams 1
			-deleteKeyCommand "MG_pathTracker_delItem"
			-sc "MG_pathTracker_selectItemCommand 1"
			-ann `MG_DualLan "pathTracker.trackNode.tsl.ann"`
			-dcc "MG_pathTracker_manualUpdate"
			MG_pathTracker_Obj_TSL;
			
		$lbl=`MG_DualLan "pathTracker.updateAuto.lbl"`;	
		string $text02=`text -l $lbl`;
			textScrollList 
				-ams 1
				-w $tslWidthSmall 
				-sc "MG_pathTracker_selectItemCommand 2"
				-deleteKeyCommand "MG_pathTracker_delItem"
				-ann `MG_DualLan "pathTracker.updateAuto.tsl.ann"`
				MG_pathTracker_Update_TSL;
				
		$lbl=`MG_DualLan "pathTracker.path.lbl"`;	
		string $text03=`text -l $lbl`;		
		textScrollList 
			-ams 1
				-w $tslWidthSmall 
			//-fn "fixedWidthFont"
			-sc "MG_pathTracker_selectItemCommand 3"
			-deleteKeyCommand "MG_pathTracker_delItem"
			-ann `MG_DualLan "pathTracker.path.tsl.ann"`
			MG_pathTracker_PathV_TSL;	
			
		$lbl=`MG_DualLan "pathTracker.fr.lbl"`;		
		string $text04=`text -l $lbl`;		
		textScrollList 
			-ams 1
				-w $tslWidthSmall 
			//-fn "fixedWidthFont"
			-sc "MG_pathTracker_selectItemCommand 4"
			-deleteKeyCommand "MG_pathTracker_delItem"
			-ann `MG_DualLan "pathTracker.fr.tsl.ann"`
			MG_pathTracker_FrameV_TSL;
				
		$lbl=`MG_DualLan "pathTracker.key.lbl"`;					
		string $text05=`text -l $lbl`;	
		textScrollList 
				-ams 1
				-w $tslWidthSmall 
			-sc "MG_pathTracker_selectItemCommand 5"
			-deleteKeyCommand "MG_pathTracker_delItem"
				-ann `MG_DualLan "pathTracker.key.tsl.ann"`
				MG_pathTracker_KeyV_TSL;
					
	frameLayout -w 95
		-cll 1 -l `MG_DualLan "pathTracker.null.lbl"` MG_pathTracker_attrFL;
	global int $MGTools_2016_orNot;
	if(!$MGTools_2016_orNot)
	{
		frameLayout -e -borderStyle "etchedOut" -borderVisible true MG_pathTracker_attrFL;
	}	
	if(!$MGTools_2011_orNot)	frameLayout -e -labelWidth 200  MG_pathTracker_attrFL;
	 if( $LinuxBefore2011)frameLayout -e -h 150  MG_pathTracker_attrFL;
		columnLayout -adj 1;
			rowLayout -nc 2 -cw2 183 70 -cl2 "center" "center";
			rowLayout -nc 4 -cw4 60 40 40 30 
				-cl4 "right" "center"   "center" "center" ;
				text -l `MG_DualLan "pathTracker.time.lbl"` -w 60;
				floatField -pre 2 -v 1 -w 40 -cc "MG_pathTracker_UISetOtherCommand 2" MG_pathTracker_startT_IF;
				//button -l "<" -w 20 MG_pathTracker_startT_btn;
				//text -l "to" -w 13 ;
				floatField -pre 2 -v 24 -w 40 -cc "MG_pathTracker_UISetOtherCommand 3" MG_pathTracker_endT_IF;
				button -l "<" -w 30 
						-c "MG_pathTracker_inputStartEnd"
						-ann `MG_DualLan "pathTracker.timeInput.ann"`;
			setParent..;	
			    if($MacOSBefore2011||$LinuxBefore2011)
			    {
    				
    				checkBox -v 0		                
							-cc "MG_pathTracker_UISetOtherCommand 4" 
							-l `MG_DualLan "pathTracker.linkRange.lbl" `
							-w 62 -h 20 
							-al "center"		
							-ann `MG_DualLan "pathTracker.timeRangeLink.ann"`					
							MG_pathTracker_linkRangeCB;
			    }
			    else
			    {
			        string $flll=`frameLayout -cll 0 -lv 0 -l ""`;
			        global int $MGTools_2016_orNot;
							if(!$MGTools_2016_orNot)
							{
								frameLayout -e -borderStyle "etchedOut" -borderVisible true $flll;
							}	
    				iconTextCheckBox -v 0 				                
    								-cc "MG_pathTracker_UISetOtherCommand 4" 
    								-style "textOnly" 
    								-l `MG_DualLan "pathTracker.linkRange.lbl" `
    								-w 62 -h 20 
    								-al "center"	
    								-fn "plainLabelFont"		
    								-ann `MG_DualLan "pathTracker.timeRangeLink.ann"`					
    								MG_pathTracker_linkRangeCB;
    			    setParent..;
			    }
			setParent..;
			separator -st "in";
			colorIndexSliderGrp 
						-min 1 -max 32 
						-v 19 
						-label `MG_DualLan "pathTracker.pathC.lbl" ` 
						-cw 1 65 -cw 2 30 
						-dc "MG_pathTracker_colorSizeDoit 1"
						MG_pathTracker_pathColorCSG;
			colorIndexSliderGrp 
						-min 1 -max 32 
						-v 18 
						-label `MG_DualLan "pathTracker.frC.lbl" ` 
						-cw 1 65 -cw 2 30 
						-dc "MG_pathTracker_colorSizeDoit 2"
						MG_pathTracker_FrameColorCSG;
			colorIndexSliderGrp 
						-min 1 -max 32 
						-v 14 
						-label `MG_DualLan "pathTracker.keyC.lbl" ` 
						-cw 1 65 -cw 2 30 
						-dc "MG_pathTracker_colorSizeDoit 3"
						MG_pathTracker_KeyColorCSG;	
			floatSliderGrp 
						-min 0.1 -max 10  
						-v 1 
						-label `MG_DualLan "pathTracker.size.lbl"`
						-field true 
						-cw 1 63 
						-cw 2 30 
						-dc "MG_pathTracker_colorSizeDoit 4"
						MG_pathTracker_sizeFSG;
				
	formLayout -e
		-af MG_pathTracker_topRL "top" 3
		-af MG_pathTracker_topRL "left" 3
		-af MG_pathTracker_topRL "right" 3
		
		-ac $text01 "top" 3 MG_pathTracker_topRL
		-af $text01 "left" 3
		-ac $text01 "right" 3	$text02
			
		-ac $text02 "top" 3 MG_pathTracker_topRL
		-ac $text02 "right" 1	$text03
						
		-ac $text03 "top" 3 MG_pathTracker_topRL
		-ac $text03 "right" 4 $text04
		
		-ac $text04 "top" 3 MG_pathTracker_topRL
		-ac $text04 "right" 5 $text05
				
		-ac $text05 "top" 3 MG_pathTracker_topRL
		-af $text05 "right" 0
		
		-ac MG_pathTracker_Obj_TSL "top" 0 $text01
		-af MG_pathTracker_Obj_TSL "left" 3
		-ac MG_pathTracker_Obj_TSL "right" -1 MG_pathTracker_Update_TSL	
		-ac MG_pathTracker_Obj_TSL "bottom" 3 MG_pathTracker_attrFL
			
		-ac MG_pathTracker_Update_TSL "top" 0 $text01
		-ac MG_pathTracker_Update_TSL "right" -1	MG_pathTracker_PathV_TSL
		-ac MG_pathTracker_Update_TSL "bottom" 3 MG_pathTracker_attrFL
				
		-ac MG_pathTracker_PathV_TSL "top" 0 $text01
		-ac MG_pathTracker_PathV_TSL "right" -1	MG_pathTracker_FrameV_TSL
		-ac MG_pathTracker_PathV_TSL "bottom" 3 MG_pathTracker_attrFL

		-ac MG_pathTracker_FrameV_TSL "top" 0 $text01
		-ac MG_pathTracker_FrameV_TSL "right" -1	MG_pathTracker_KeyV_TSL
		-ac MG_pathTracker_FrameV_TSL "bottom" 3 MG_pathTracker_attrFL
				
		-ac MG_pathTracker_KeyV_TSL "top" 0 $text01
		-af MG_pathTracker_KeyV_TSL "right" 3
		-ac MG_pathTracker_KeyV_TSL "bottom" 3 MG_pathTracker_attrFL
				
		-af MG_pathTracker_attrFL "bottom" 3
		-af MG_pathTracker_attrFL "right" 3
		-af MG_pathTracker_attrFL "left" 3															
		$mainF;
	showWindow  MG_pathTracker_UI;
	window -e -wh 263 273 MG_pathTracker_UI;
	MG_pathTracker_updateUI; 
}
global proc MG_pathTracker_addInAttachCam ()
{
	string $camNode;
	string $panel=`getPanel -withFocus`;
	string $allViews []=`getPanel -type "modelPanel"`;
	string $activeViewType=`getPanel -typeOf $panel`;
	string $tempCam;
	if($activeViewType!="scriptedPanel")
	{
		$tempCam=`modelPanel -q -cam $panel`;	
	}
	string $sel[]=`ls -sl`;
	string $temp [];clear $temp;
	if(size($sel))
	{
		if(`nodeType $sel[0]`=="camera")
		{
				$temp = `listRelatives -p -path  $sel[0]`;
				$camNode=$temp[0];
		}
		else
		{
			if(`nodeType $sel[0]`=="transform")	
			{
				$temp = `listRelatives -c -path $sel[0]`;
				if(`nodeType $temp[0]`=="camera")
				{
					$camNode=$sel[0];	
				}		
			}
		}
	}
	if(!size($camNode))
	{		
		if(`nodeType $tempCam`=="camera")
		{
				$temp = `listRelatives -p -path $tempCam`;
				$tempCam=$temp[0];
		}
		$camNode=$tempCam;
	}
	if(size($camNode))
	{
		textField -e -text $camNode MG_pathTracker_camTF;
		MG_camAttachToggleForMacEarly 1;
		string $selIItems []=`textScrollList 	-q -si MG_pathTracker_Obj_TSL`;	
		int $size =size($selIItems);
		if($size)
		{
			for ($each in  $selIItems)
			{
				MG_pathTracker_recordSingleValue $each  "cam" 0;
				MG_pathTracker_recordSingleValue $each  "attachToCam" 1;
				MG_pathTracker_update   $each;
		}	
	}	

	}	
}
global proc MG_pathTracker_manualUpdate ()
{
	string $si []=`textScrollList -q -si MG_pathTracker_Obj_TSL`;
	if(!size($si)){return;}
	global int $g_MGCurrentMayaSupportPythonOrNot;
	//print "MG_pathTracker_manualUpdate invoked !\n";	
	for ($each in $si)
	{		
			string $snapShotNode =($each+"_record");
			if($g_MGCurrentMayaSupportPythonOrNot)				
			{setAttr ($snapShotNode+".update") 2;}
			else {setAttr ($snapShotNode+".update") 1;}
			MG_pathTracker_update $each;
	}
	//string $sel[]=`ls -sl`;
	//select $si;
	//delete `snapshot  -motionTrail 1`;
	//if(size($sel)){select $sel;}
	//else {select -cl;}
}
global proc MG_pathTracker_addItem ()
{
	string $sel[]=`ls -sl`;
	if(!size($sel)){return;}
    global int $MacOSBefore2011;
    global int $LinuxBefore2011;
    int $tslWidthSmall = 22;
    if($MacOSBefore2011||$LinuxBefore2011)$tslWidthSmall = 42;
	string $ai []=`textScrollList -q -ai MG_pathTracker_Obj_TSL`;
	for ($each in $sel)
	{
		int $exists =0;
		for ($eachl in $ai)
		{
			if($eachl==$each)	
			{
				$exists =1;
				break;
				
			}
		}
		if($exists){continue;}

				
		textScrollList -e -append $each	MG_pathTracker_Obj_TSL;
		textScrollList -e -append "A"	-w $tslWidthSmall MG_pathTracker_Update_TSL;	
		textScrollList -e -append "P"	-w $tslWidthSmall MG_pathTracker_PathV_TSL;	
		textScrollList -e -append "F"	-w $tslWidthSmall MG_pathTracker_FrameV_TSL;					
		textScrollList -e -append "K"	-w $tslWidthSmall MG_pathTracker_KeyV_TSL;	
		int $size=size(`textScrollList -q -ai MG_pathTracker_Obj_TSL`);
		textScrollList -e -da MG_pathTracker_Obj_TSL;
		textScrollList -e -sii $size MG_pathTracker_Obj_TSL;
		MG_pathTracker_selectItemCommand 1;
		
		//now test if it already down before.
		string $grp=$each+"_trackGrp";
		if(`objExists $grp`)
		{
			if(`attributeExists "updateID" $grp`)	
			{
				int $id=`getAttr ($grp+".updateID")`;
					if(`scriptJob -ex $id`)
					{
						continue;
					}
			}
		}
		MG_pathTracker_makeTrack $each;
		MG_pathTracker_recordAllValuesOnTrackgrp 	$each 1 1 1 1;
	}
	delete `snapshot  -motionTrail 1`;
}

global proc MG_pathTracker_delItem ()
{
    global int $MacOSBefore2011;
    global int $LinuxBefore2011;
    int $tslWidthSmall = 22;
    if($MacOSBefore2011||$LinuxBefore2011)$tslWidthSmall = 42;
    
    int $sel[]=`textScrollList -q -sii MG_pathTracker_Obj_TSL`;
	string $objs[]=`textScrollList -q -ai MG_pathTracker_Obj_TSL`;
	if(!size($sel)){return;}
	for ($each in $sel)
	{
		textScrollList -e -rii $each MG_pathTracker_Obj_TSL;
		textScrollList -e -rii $each -w $tslWidthSmall  MG_pathTracker_Update_TSL;
		textScrollList -e -rii $each -w $tslWidthSmall  MG_pathTracker_PathV_TSL;
		textScrollList -e -rii $each -w $tslWidthSmall  MG_pathTracker_FrameV_TSL;
		textScrollList -e -rii $each -w $tslWidthSmall  MG_pathTracker_KeyV_TSL;	
		string $thesel=$objs[($each-1)];
		MG_pathTracker_TurnOnOffAutoUpdate $thesel 0;
		MG_pathTracker_TurnOnOffAutoLinkRange $thesel 0; 
		string $trackGrpName =($thesel+"_trackGrp");
		if(`objExists $trackGrpName`)delete $trackGrpName;
	}
}

global proc MG_pathTracker_selectItemCommand (int $tslIndex)
{
	string $tslname="";
	string $otherTsls []={"MG_pathTracker_Obj_TSL","MG_pathTracker_Update_TSL","MG_pathTracker_PathV_TSL","MG_pathTracker_FrameV_TSL","MG_pathTracker_KeyV_TSL"};
	string $values=" ";
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
    int $tslWidthSmall = 22;
    if($MacOSBefore2011||$LinuxBefore2011)$tslWidthSmall = 42;
	switch ($tslIndex)
	{
		case 1:
			$tslname="MG_pathTracker_Obj_TSL";
			$otherTsls={"MG_pathTracker_Update_TSL","MG_pathTracker_PathV_TSL","MG_pathTracker_FrameV_TSL","MG_pathTracker_KeyV_TSL"};
			break;
		case 2:
			$tslname="MG_pathTracker_Update_TSL";
			$value="A";
			break;			
		case 3:
			$tslname="MG_pathTracker_PathV_TSL";
			$value="P";
			break;	
		case 4:
			$tslname="MG_pathTracker_FrameV_TSL";
			$value="F";
			break;			
		case 5:
			$tslname="MG_pathTracker_KeyV_TSL";
			$value="K";
			break;						
	}

	int $sel[]=`textScrollList -q -sii $tslname`;	
	int $lastIndex = size ($sel)-1;
	if($lastIndex<0)return;
	int $bool=0;
	if($tslIndex!=1)	
	{
			string $autoS []=`textScrollList -q -ai $tslname`;
			if($autoS [($sel [ $lastIndex]-1)]==$value)
			{
				$autoS [($sel [ $lastIndex]-1)]=" ";	
			}
			else 
			{
				$autoS [($sel [ $lastIndex]-1)]=$value;	
				$bool = 1;
			}		
				
			textScrollList -e -ra $tslname;
			for ($eacha in $autoS)
			{
					textScrollList -e -append $eacha $tslname;
			}	
			textScrollList -e -w $tslWidthSmall $tslname;			
	}

	for ($eachTsl in $otherTsls)
	{	
		textScrollList -e -da $eachTsl;
		for ($each in $sel)
		{
			textScrollList -e -sii $each $eachTsl;
		}					
	}
	string $selItems []=`textScrollList -q -si MG_pathTracker_Obj_TSL`;
	int $theIdex = size($selItems)-1;
	if($theIdex<0)return;
	string $node = $selItems [$theIdex];	
	frameLayout -e -l $node MG_pathTracker_attrFL;
	if($tslIndex!=1)	
	{	
		if($tslIndex!=2)MG_pathTracker_setVis $node ($tslIndex-2) $bool;
		if($tslIndex==2)
		{
			MG_pathTracker_recordSingleValue $node "autoUpdate" $bool;
			MG_pathTracker_TurnOnOffAutoUpdate $node $bool;
		}
		else if($tslIndex==3)
		{MG_pathTracker_recordSingleValue $node "PathV" $bool;}	
		else if($tslIndex==4)
		{MG_pathTracker_recordSingleValue $node "FrameV" $bool;}	
		else if($tslIndex==5)
		{MG_pathTracker_recordSingleValue $node "KeyV" $bool;}					
	}
	MG_pathTracker_readValueFromTrackgrp $node;
		
}

global proc MG_pathTracker_setCurrentSetItemUI ()
{
	string $selItems []=`textScrollList -q -si MG_pathTracker_Obj_TSL`;
	if(!size($selItems))
	{
			frameLayout -e -cl 1 -en 0 -l `MG_DualLan "pathTracker.null.lbl"` MG_pathTracker_attrFL;
			return;
	}
	string $node = $selItems [0];	
	frameLayout -e -cl 0 -en 1 -l $node MG_pathTracker_attrFL;
}

proc MG_dealWithChannel (string $trans,int $mode)
{
	//mode0 :vis only, other are constraintable, scale are lock and hide
	if(!$mode)
	{
		setAttr -keyable false  ($trans+".tx");
		setAttr -keyable false  ($trans+".ty");
		setAttr -keyable false  ($trans+".tz");
		setAttr -keyable false  ($trans+".rx");
		setAttr -keyable false  ($trans+".ry");
		setAttr -keyable false  ($trans+".rz");
		setAttr -lock true -keyable false  ($trans+".sx");
		setAttr -lock true -keyable false  ($trans+".sy");
		setAttr -lock true -keyable false  ($trans+".sz");
		setAttr -keyable false -channelBox true ($trans+".v");
	}
}
global proc MG_pathTracker_updateDoIt (string $transformNode,string $trackGrpName,string $snapShotNode,
											int $autoUpdate, int $pathV, int $frameV,int $keyV,
											int $pathColor, int $frameColor,int $keysColor,string $cam, int $linkCam,
											float $size)
{
	if(!`objExists $transformNode`)
	{
		return;	
	}
	
		string $sel[]=`ls -sl`;
		string $oldc[]= `listRelatives -f -c $trackGrpName`;
		if(size($oldc))delete $oldc;
		//print "Invoke!\n";
		//if($linkCam)
		//{
		//	if(!size(`parentConstraint -q $trackGrpName`))
		//	{parentConstraint -mo $cam $trackGrpName;}
		//}
		string $dupNodeTname=($cam+"_tempDupForTrack");
		if (`objExists $dupNodeTname`)delete $dupNodeTname;
		float $currentT [];clear $currentT;
		float $currentR [];clear $currentR;
		//global int $MGTools_7_orNot; 
		if($linkCam)
		{
				//if($MGTools_7_orNot)
				//{					
					$dupNodeTname =`group -em -n $dupNodeTname`;
					float $rp[]=`xform  -q -rp $cam`;
					$currentT =`getAttr ($cam+".t")`;
					$currentR =`getAttr ($cam+".r")`;
					xform -rp $rp[0] $rp[1] $rp[2] $dupNodeTname;
					setAttr ($dupNodeTname+".t")  $currentT[0] $currentT[1] $currentT[2];
					setAttr ($dupNodeTname+".r")  $currentR[0] $currentR[1] $currentR[2];					
				/*
				}
				else
				{
					$tempd=`duplicate -n $dupNodeTname -parentOnly $cam`;
				}
				
				*/	
		}	
			
		string $trackCurveName=($transformNode+"_trackCurve");		
	
	//get world data
		$snapShotNode = ($transformNode+"_record");
		if(!`objExists $snapShotNode`)//delete $snapShotNode;
		{
			createNode -n $snapShotNode snapshot;
			connectAttr -f	($transformNode+".selectHandle") ($snapShotNode+".localPosition");
			connectAttr -f	($transformNode+".worldMatrix [0]") ($snapShotNode+".inputMatrix");
		}
		// Can not set increment to 1 since that will trigger endless redraw of timeline
		
		float $rawWorldDatas[]=`getAttr ($snapShotNode+".pts")`; 
		float $startT=`getAttr ($snapShotNode+".startTime")`; 
		float $endT=`getAttr ($snapShotNode+".endTime")`;
		//float $worldData [];clear $worldData; 
		float $keyIndexs [] =`keyframe -q -tc $transformNode`;
		float $cTime=$startT;
		float $currentTime = `currentTime -q`;
		float $wx=0,$wy=0,$wz=0;
		string $cTimeName = $cTime;
		for ($i=0;$i<size($rawWorldDatas);$i+=4) 
		{ 
			$wx=$rawWorldDatas[$i];
			$wy= $rawWorldDatas[($i+1)];
			$wz= $rawWorldDatas[($i+2)]; 
			int $keyCounts = `keyframe -t $cTime -q  -kc ($transformNode+".tx")`;
			if(!$keyCounts){$keyCounts += `keyframe -t $cTime -q  -kc ($transformNode+".ty")`;}
			if(!$keyCounts){$keyCounts += `keyframe -t $cTime -q  -kc ($transformNode+".tz")`;}
			string $tickObjName;
			
			//create tick shape
			if(!$keyCounts)
			{ 
				$tickObjName= ($transformNode+"_track_"+$cTime+"_"+"f");
				$tickObjName = `curve -n $tickObjName 
					-d 1 -p 0 0.04 0 -p -0.02828428 
					0.02828428 0 -p -0.04 0 0 -p -0.02828428 -0.02828428 0 -p 0 -0.04 0 -p 0.02828428 -0.02828428 
					0 -p 0.04 0 0 -p 0.02828428 0.02828428 0 -p 0 0.04 0 -p 0 0.02828428 0.02828428 -p 0 0 0.04 -p 
					0 -0.02828428 0.02828428 -p 0 -0.04 0 -p 0 -0.02828428 -0.02828428 -p 0 0 -0.04 -p 0 
					0.02828428 -0.02828428 -p 0 0.04 0 -p 0 0.02828428 -0.02828428 -p 0 0 -0.04 -p 0.02828428 0 -
					0.02828428 -p 0.04 0 0 -p 0.02828428 0 0.02828428 -p 0 0 0.04 -p -0.02828428 0 0.02828428 -p -
					0.04 0 0 -p -0.02828428 0 -0.02828428 -p 0 0 -0.04 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 
					7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 
					-k 21 -k 22 -k 23 -k 24 -k 25 -k 26`;		
					if(!$keyV)setAttr ($tickObjName+".v") $keyV;	
			}
			else
			{
				$tickObjName = ($transformNode+"_track_"+$cTime+"_"+"k");
				$tickObjName = `curve -n $tickObjName 
					-d 1 -p 0 0.08 0 -p -0.05656856 
					0.05656856 0 -p -0.08 0 0 -p -0.05656856 -0.05656856 0 -p 0 -0.08 0 -p 0.05656856 -0.05656856 
					0 -p 0.08 0 0 -p 0.05656856 0.05656856 0 -p 0 0.08 0 -p 0 0.05656856 0.05656856 -p 0 0 0.08 -p 
					0 -0.05656856 0.05656856 -p 0 -0.08 0 -p 0 -0.05656856 -0.05656856 -p 0 0 -0.08 -p 0 
					0.05656856 -0.05656856 -p 0 0.08 0 -p 0 0.05656856 -0.05656856 -p 0 0 -0.08 -p 0.05656856 0 -
					0.05656856 -p 0.08 0 0 -p 0.05656856 0 0.05656856 -p 0 0 0.08 -p -0.05656856 0 0.05656856 -p -
					0.08 0 0 -p -0.05656856 0 -0.05656856 -p 0 0 -0.08 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 
					7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 
					-k 21 -k 22 -k 23 -k 24 -k 25 -k 26`;
					if(!$frameV)setAttr ($tickObjName+".v") $frameV;		
			}
			//parent $tickObjName $trackGrpName;
			
			setAttr ($tickObjName+".t") $wx $wy $wz;
			if($cTime!=$currentTime	)	
			{
				if($linkCam)
				{					
						float $theParentT []=`getAttr -t $cTime ($cam+".t")`;
						float $theParentR []=`getAttr -t $cTime ($cam+".r")`;
						setAttr  ($dupNodeTname+".t") $theParentT[0] $theParentT[1]	 $theParentT[2];
						setAttr  ($dupNodeTname+".r") $theParentR[0] $theParentR[1]	 $theParentR[2];
						parent $tickObjName $dupNodeTname;						
						setAttr  ($dupNodeTname+".t") $currentT[0] $currentT[1]	 $currentT[2];
						setAttr  ($dupNodeTname+".r") $currentR[0] $currentR[1]	 $currentR[2];
						parent -w $tickObjName;
						$wx=`getAttr ($tickObjName+".tx")`;
						$wy=`getAttr ($tickObjName+".ty")`;
						$wz=`getAttr ($tickObjName+".tz")`;		
						parent $tickObjName $trackGrpName;															
				}	
				else
				{parent $tickObjName $trackGrpName;}
			}
			else
			{parent $tickObjName $trackGrpName;}		
	
			if (!$i)
			{
				curve -d 1
					-p $wx $wy $wz 
				  -n $trackCurveName;	
				parent $trackCurveName $trackGrpName; 
				reorder -relative -1 $trackCurveName; 
			}
			else
			{
				curve -a 	-p $wx $wy $wz  $trackCurveName;				
			}		
			$cTime++;					
		}	
		setAttr ($trackCurveName+".v") $pathV;	
		MG_pathTracker_colorObj $transformNode 1 $pathColor;
		MG_pathTracker_colorObj $transformNode 2 $frameColor;
		MG_pathTracker_colorObj $transformNode 3 $keysColor;
		MG_pathTracker_colorObj $transformNode 4 $size;	
		if($linkCam)
		{
			if(!size(`parentConstraint -q $trackGrpName`))
			{parentConstraint -mo $cam $trackGrpName;}
			delete $dupNodeTname; 
		}		
	select	$sel;
}
global proc MG_pathTracker_makeTrack (string $transformNode)
{
	//initilize values
    global int $MacOSBefore2011;
		global int $LinuxBefore2011;
		int $autoUpdate=0, $pathV=0,  $frameV=0, $keyV=0;
		int $linkToRange=0,$pathColor,$frameColor,$keysColor;
		string $cam="";int $linkCam;
		float $startT,$endT,$size;
		string $temp [];clear $temp;
		$temp=`textScrollList -q -si MG_pathTracker_Update_TSL`;
		if(!size($temp))
		{$autoUpdate=1;}
		else
		{
			if($temp[0]=="A")
			{$autoUpdate=1;}
		}
		$temp=`textScrollList -q -si MG_pathTracker_PathV_TSL`;
		if(!size($temp))
		{$pathV=1;}
		else
		{
			if($temp[0]=="P")
			{$pathV=1;}
		}
			
		$temp=`textScrollList -q -si MG_pathTracker_FrameV_TSL`;
		if(!size($temp))
		{$frameV=1;}
		else
		{
			if($temp[0]=="F")
			{$frameV=1;}
		}
		
		$temp=`textScrollList -q -si MG_pathTracker_KeyV_TSL`;
		if(!size($temp))
		{$keyV=1;}
		else
		{
			if($temp[0]=="K")
			{$keyV=1;}
		}		
		
		//$startT=`floatField -q -v MG_pathTracker_startT_IF`;
		//$endT=`floatField -q -v MG_pathTracker_endT_IF`;
		float $rangeReturn []=`MG_returnSelectedRangeOrTimeRange`;
		$startT=$rangeReturn [1];
		$endT=$rangeReturn [2];
		floatField -e -v $rangeReturn [1] MG_pathTracker_startT_IF;
		floatField -e -v $rangeReturn [2] MG_pathTracker_endT_IF;
						
		$size=`floatSliderGrp -q -v MG_pathTracker_sizeFSG`;		
		if($MacOSBefore2011|| $LinuxBefore2011)
		    $linkToRange=`checkBox -q -v MG_pathTracker_linkRangeCB`;
		else
		    $linkToRange=`iconTextCheckBox -q -v MG_pathTracker_linkRangeCB`;		    
		$pathColor=`colorIndexSliderGrp -q -v MG_pathTracker_pathColorCSG`;	
		$frameColor=`colorIndexSliderGrp -q -v MG_pathTracker_FrameColorCSG`;	
		$keysColor=`colorIndexSliderGrp -q -v MG_pathTracker_KeyColorCSG`;	
		
		$cam=`textField -q -text MG_pathTracker_camTF`;
		$linkCam = size($cam)>0;		
		$linkCam = `iconTextCheckBox -q -v MG_pathTracker_lickCamCB`;
				
		string $snapShotNode = ($transformNode+"_record");
		if(`objExists $snapShotNode`)delete $snapShotNode;
		createNode -n $snapShotNode snapshot;
		connectAttr -f	($transformNode+".selectHandle") ($snapShotNode+".localPosition");
		connectAttr -f	($transformNode+".worldMatrix [0]") ($snapShotNode+".inputMatrix");
		//connectAttr -f ($snapShotNode+".points") ($transformNode+".ghostDriver");
	
		setAttr ($snapShotNode+".startTime") $startT;
		setAttr ($snapShotNode+".endTime")  $endT;
		
		global int $g_MGCurrentMayaSupportPythonOrNot;
		if($g_MGCurrentMayaSupportPythonOrNot){setAttr ($snapShotNode+".update") 2;}
		else {setAttr ($snapShotNode+".update") 1;}
		
		string $trackGrpName =($transformNode+"_trackGrp");
		if (`objExists $trackGrpName`)delete $trackGrpName;
		$trackGrpName =`group -em -n $trackGrpName`;
		MG_dealWithChannel $trackGrpName 0;
		
		//connect the startTime end Time
		if(!`attributeExists "StartTime" $trackGrpName`)
			addAttr -ln "StartTime" 	$trackGrpName;
		if(!`attributeExists "EndTime" $trackGrpName`)
			addAttr -ln "EndTime" 	$trackGrpName;	
		connectAttr -f ($trackGrpName+".StartTime")	($snapShotNode+".startTime");
		connectAttr -f ($trackGrpName+".EndTime")	($snapShotNode+".endTime");
		MG_pathTracker_updateDoIt ($transformNode,$trackGrpName,$snapShotNode,
											$autoUpdate,$pathV,$frameV,$keyV,
											$pathColor,$frameColor,$keysColor,$cam,$linkCam,
											 $size);
		if($autoUpdate)  MG_pathTracker_TurnOnOffAutoUpdate  $transformNode $autoUpdate;
		if($linkToRange) MG_pathTracker_TurnOnOffAutoLinkRange  $transformNode $linkToRange;									 
		select $transformNode;
}
global proc MG_pathTracker_TurnOnOffAutoUpdate(string $transformNode,int $onoff)
{
	string $trackGrpName =($transformNode+"_trackGrp");	
	string $snapShotNode =($transformNode+"_record");	
	int $id=0;
	if($onoff)
	{	
		
		if(!`attributeExists "updateID" $trackGrpName`)
			{
					addAttr -ln "updateID"
								-at "long"
								$trackGrpName;				
			}
		$id=`getAttr ($trackGrpName+".updateID")`;
		if(!`scriptJob -ex $id`){$id=0;}
		if(!$id)
			{
				$id=`scriptJob -compressUndo 1 -killWithScene  -attributeChange  ($snapShotNode+".pts") ("MG_pathTracker_update "+$transformNode)`;
				setAttr ($trackGrpName+".updateID") $id;	
			}
			MG_pathTracker_update $transformNode;

	}
	else
	{

		if(`attributeExists "updateID" $trackGrpName`)$id=`getAttr ($trackGrpName+".updateID")`;
		if($id)
		{
			if(`scriptJob -ex $id`)
			{scriptJob -f  -kill $id;}
		}
	}	
}
global proc MG_pathTracker_TurnOnOffAutoLinkRange(string $transformNode,int $onoff)
{
	string $trackGrpName =($transformNode+"_trackGrp");	
	string $snapShotNode =($transformNode+"_record");	
	if($onoff)
	{	
		if(!`attributeExists "rangeLinkID" $trackGrpName`)
			{
					addAttr -ln "rangeLinkID"
								-at "long"
								$trackGrpName;				
			}
			int $id=`scriptJob -compressUndo 1 -killWithScene -e  "playbackRangeChanged" ("MG_pathTracker_changeLinkRange "+$transformNode)`;
			setAttr ($trackGrpName+".rangeLinkID") $id;	
	}
	else
	{
		if(`attributeExists "rangeLinkID" $trackGrpName`)
		{
			int $id=`getAttr ($trackGrpName+".rangeLinkID")`;
			if(`scriptJob -ex $id`)
			scriptJob -f  -kill $id;
		}
		
	}	
}
global proc MG_pathTracker_updateUI ()
{
	if (!`window -exists MG_pathTracker_UI`)return;
	string $cls[]={"MG_pathTracker_Obj_TSL","MG_pathTracker_Update_TSL","MG_pathTracker_PathV_TSL","MG_pathTracker_FrameV_TSL","MG_pathTracker_KeyV_TSL"};
	for ($eachTsl in $cls)textScrollList -e -ra $eachTsl;
	
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
    int $tslWidthSmall = 22;
    if($MacOSBefore2011|| $LinuxBefore2011)$tslWidthSmall = 42;

	string $grps []=`ls "*_trackGrp"`;
    $grps = stringArrayCatenate($grps,`ls "*:*_trackGrp"`);
    $grps = stringArrayCatenate($grps,`ls "*:*:*_trackGrp"`);
    $grps = stringArrayCatenate($grps,`ls "*:*:*:*_trackGrp"`);
	string $realGrps [];clear $realGrps; 
	string $autoSet [];clear $autoSet; 
	string $pathV [];clear $pathV;
	string $frV [];clear $frV;
	string $keyV [];clear $keyV;
	for ($trackGrpName in $grps)
	{
		if(!`attributeExists "StartTime" $trackGrpName`)
		{continue;}
		
		string $obj =`substring $trackGrpName 1 (size($trackGrpName)-9)`;
		if(`objExists $obj`)
		{
			$realGrps[size($realGrps)]=$obj ;
			if(`getAttr ($trackGrpName+".autoUpdate")`){$autoSet[size($autoSet)]="A";}
			else{$autoSet[size($autoSet)]=" ";}
			if(`getAttr ($trackGrpName+".PathV")`){$pathV[size($pathV)]="P";}
			else{$pathV[size($pathV)]=" ";}		
			if(`getAttr ($trackGrpName+".FrameV")`){$frV[size($frV)]="F";}
			else{$frV[size($frV)]=" ";}					
			if(`getAttr ($trackGrpName+".KeyV")`){$keyV[size($keyV)]="K";}
			else{$keyV[size($keyV)]=" ";}					
		}
	}
	if(!size($realGrps))return;
	textScrollList -e -ra 	MG_pathTracker_Obj_TSL;
	textScrollList -e -ra 	MG_pathTracker_Update_TSL;	
	textScrollList -e -ra 	MG_pathTracker_PathV_TSL;
	textScrollList -e -ra 	MG_pathTracker_FrameV_TSL;
	textScrollList -e -ra 	MG_pathTracker_KeyV_TSL;	
	for ($i=0;$i<size($realGrps);$i++)	
	{
			textScrollList -e -append  $realGrps[$i]	MG_pathTracker_Obj_TSL;
			textScrollList -e -append  $autoSet[$i]	MG_pathTracker_Update_TSL;	
			textScrollList -e -append  $pathV[$i]	MG_pathTracker_PathV_TSL;
			textScrollList -e -append  $frV[$i]	MG_pathTracker_FrameV_TSL;			
			textScrollList -e -append  $keyV[$i]	MG_pathTracker_KeyV_TSL;
	}
	textScrollList -e -sii 1 -w $tslWidthSmall MG_pathTracker_Obj_TSL;
	textScrollList -e -sii 1 -w $tslWidthSmall MG_pathTracker_Update_TSL;
	textScrollList -e -sii 1 -w $tslWidthSmall MG_pathTracker_PathV_TSL;
	textScrollList -e -sii 1 -w $tslWidthSmall MG_pathTracker_FrameV_TSL;
	textScrollList -e -sii 1 -w $tslWidthSmall MG_pathTracker_KeyV_TSL;	
	MG_pathTracker_selectItemCommand 1;

}
global proc MG_pathTracker_inputStartEnd ()
{
	float $rangeReturn []=`MG_returnSelectedRangeOrTimeRange`;
	//float $start =`playbackOptions -q -min`;
	//float $end =`playbackOptions -q -max`;
	floatField -e -v $rangeReturn [1] MG_pathTracker_startT_IF;
	floatField -e -v $rangeReturn [2] MG_pathTracker_endT_IF;
	MG_pathTracker_UISetOtherCommand 5;	
}
global proc MG_pathTracker_changeLinkRange(string $transformNode)
{
	string $trackGrpName =($transformNode+"_trackGrp");
	if(!`objExists $trackGrpName`)return;
	string $snapShotNode =($transformNode+"_record");	
	if(!`objExists $snapShotNode`)return;
	float $start =`playbackOptions -q -min`;
	float $end =`playbackOptions -q -max`;
	setAttr ($trackGrpName+".StartTime") $start;
	setAttr ($trackGrpName+".EndTime") $end;	
	//setAttr ($snapShotNode+".startTime")  $start;
	//setAttr ($snapShotNode+".endTime")  $end;		
}
global proc MG_pathTracker_colorSizeDoit (int $mode)
{
	string $selItems []=`textScrollList -q -si MG_pathTracker_Obj_TSL`;
	if(!size($selItems))
	{
			return;
	}
	for ($each in $selItems)
	{
		MG_pathTracker_colorObj_viaUI $each 	$mode;
	}
}
global proc MG_pathTracker_colorObj(string $trackNode,int $mode,int $value)
{
	//mode 1 :color Path
	//mode 2 :color Frames
	//mode 3 :color keys
	//mode 4 :scale size	
		string $wildCard;
		if ($mode==1)
		{
			$wildCard=($trackNode+"_trackCurve");
		}
		else if ($mode==2)
		{
			$wildCard=($trackNode+"_track_*_f");
		}	
		else if ($mode==3)
		{
			$wildCard=($trackNode+"_track_*_k");
		}	
		else 
		{
			$wildCard=($trackNode+"_track_*_*");
		}	
		string $objs[]=`ls -transforms  $wildCard`;
		for ($each in $objs)
		{
				if($mode != 4)
				{
					setAttr ($each+".overrideEnabled") 1;
					setAttr ($each+".overrideColor") ($value-1);
							
				}
				else
				{
					setAttr ($each+".s") $value $value $value;
				}			
		}	
}
global proc MG_pathTracker_colorObj_viaUI (string $trackNode,int $mode)
{
	//mode 1 :color Path
	//mode 2 :color Frames
	//mode 3 :color keys
	//mode 4 :scale size
		string $wildCard;float $value;
		if ($mode==1)
		{
			$wildCard=($trackNode+"_trackCurve");
			$value=`colorIndexSliderGrp -q -v MG_pathTracker_pathColorCSG`;
		}
		else if ($mode==2)
		{
			$wildCard=($trackNode+"_track_*_f");
			$value=`colorIndexSliderGrp -q -v MG_pathTracker_FrameColorCSG`;
		}	
		else if ($mode==3)
		{
			$wildCard=($trackNode+"_track_*_k");
			$value=`colorIndexSliderGrp -q -v MG_pathTracker_KeyColorCSG`;
		}	
		else 
		{
			$wildCard=($trackNode+"_track_*_*");
			$value=`floatSliderGrp -q -v MG_pathTracker_sizeFSG`;
		}
		string $objs[]=`ls -transforms  $wildCard`;
		for ($each in $objs)
		{
				if($mode != 4)
				{
					setAttr ($each+".overrideEnabled") 1;
					setAttr ($each+".overrideColor") ($value-1);
							
				}
				else
				{
					setAttr ($each+".s") $value $value $value;
				}
			
		}
			if($mode == 1)
			{MG_pathTracker_recordSingleValue  $trackNode "PathColor"  $value;}
			else if($mode == 2)
			{MG_pathTracker_recordSingleValue  $trackNode "FramesColor"  $value;}					
			else if($mode == 3)
			{MG_pathTracker_recordSingleValue  $trackNode "KeysColor"  $value;}	
			else if($mode == 4)
			{MG_pathTracker_recordSingleValue  $trackNode "Size" $value;}						
}
global proc MG_pathTracker_setVis (string $trackNode,int $mode,int $vis)
{
	//mode 1 :Path vis
	//mode 2 :Frames vis
	//mode 3 :keys vis	
		string $wildCard;
		if ($mode==1)
		{
			$wildCard=($trackNode+"_trackCurve");
		}
		else if ($mode==2)
		{
			$wildCard=($trackNode+"_track_*_f");
		}	
		else
		{
			$wildCard=($trackNode+"_track_*_k");
		}
		string $objs[]=`ls -transforms  $wildCard`;
		for ($each in $objs)
		{			
				setAttr ($each+".v") $vis; 		
		}	
}

global proc MG_pathTracker_recordAllValuesOnTrackgrp (string $trackNode,int $autoU,int $pathV,int $frameV,int $keyV)
{
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
    string $trackGrpName =($trackNode+"_trackGrp");	
	if(!`objExists $trackGrpName`){return;}
	
		string $attrNames []={
		"cam","attachToCam",
		"autoUpdate","PathV","FrameV","KeyV",
		"StartTime","EndTime","attachToRange",
		"PathColor","FramesColor","KeysColor","Size"};
	string $attrTypes []={
		"string","long",
		"long","long","long","long",
		"float","float","long",
		"long","long","long","float"};	
	string $cam="";
	int $attachCam=0;
	//int $autoU=1,$pathV=1,$frameV=1,$keyV=1,
	int $attachRange=0;
	float $startT=1,$endT=24,$size=1;
	int $pathC=19,$frameC=18,$keyC=14;
	$cam =`textField -q -text MG_pathTracker_camTF`;
	
	$attachCam=`iconTextCheckBox -q -v MG_pathTracker_lickCamCB`;	
	if($MacOSBefore2011|| $LinuxBefore2011)
	    $attachRange=`checkBox -q -v MG_pathTracker_linkRangeCB`;
	else
	    $attachRange=`iconTextCheckBox -q -v MG_pathTracker_linkRangeCB`;
	
	$startT=`floatField -q -v   MG_pathTracker_startT_IF`;
	$endT=`floatField -q -v   MG_pathTracker_endT_IF`;
	$size=`floatSliderGrp -q -v MG_pathTracker_sizeFSG`;
	
	$pathC=`colorIndexSliderGrp -q -v MG_pathTracker_pathColorCSG`;	
	$frameC=`colorIndexSliderGrp -q -v MG_pathTracker_FrameColorCSG`;			
	$keyC=`colorIndexSliderGrp -q -v MG_pathTracker_KeyColorCSG`;		
			
	string $attrValues []={
													$cam,$attachCam,
													$autoU,$pathV,$frameV,$keyV,
													$startT,$endT,$attachRange,
													$pathC,$frameC,$keyC,$size};				

	for ($i =0 ;$i<size($attrNames);$i++)
	{
		if(!`attributeExists $attrNames[$i] $trackGrpName`)
		{
			if($attrTypes[$i]=="string")
			{
				addAttr -ln $attrNames[$i] 
							-dt $attrTypes[$i] 
							$trackGrpName;				
			}
			else
			{
				addAttr -ln $attrNames[$i] 
							-at $attrTypes[$i] 
							//-dv 0
							$trackGrpName;					
			}
			//print ("addAttr -ln "+$attrNames[$i]+" -dt "+$attrTypes[$i]+" "+$trackGrpName+"\n");					
		}
		if($attrTypes[$i]=="string")
		{
			setAttr -type $attrTypes[$i] ($trackGrpName+"."+$attrNames[$i]) $attrValues [$i];
		}
		else
		{
			float $v = $attrValues [$i];
			setAttr ($trackGrpName+"."+$attrNames[$i]) $v;
		}

	}
}
global proc MG_pathTracker_recordSingleValue (string $trackNode,string $attrName,float $value)
{
	string $trackGrpName =($trackNode+"_trackGrp");	
	if(!`objExists $trackGrpName`){return;}
	if(!`attributeExists $attrName $trackGrpName`){return;}
	switch ($attrName)
	{
		case "cam":
			$cam =`textField -q -text MG_pathTracker_camTF`;
			setAttr -type "string" ($trackGrpName+"."+$attrName) $cam;
			break;
		case "attachToCam":
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;
		case "autoUpdate":
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;			
		case "PathV":
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;				
		case "FrameV":
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;
		case "KeyV":
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;	
		case "StartTime":
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;										
		case "EndTime":
			//$endT=`floatField -q -v   MG_pathTracker_endT_IF`;
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;
		case "attachToRange":
			//$attachRange=`iconTextCheckBox -q -v MG_pathTracker_linkRangeCB`;
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;
		case "PathColor":
			//$pathC=`colorIndexSliderGrp -q -v MG_pathTracker_pathColorCSG`;	
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;	
		case "FramesColor":
			//$frameC=`colorIndexSliderGrp -q -v MG_pathTracker_FrameColorCSG`;			
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;			
		case "KeysColor":
			//$keyC=`colorIndexSliderGrp -q -v MG_pathTracker_KeyColorCSG`;
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;	
		case "Size":
			//$size=`floatSliderGrp -q -v MG_pathTracker_sizeFSG`;
			setAttr  ($trackGrpName+"."+$attrName) $value;
			break;										
	}
}
global proc MG_pathTracker_UISetOtherCommand (int $mode)
{
	//mode 1: turn on/off cam attachCam
	//mode 2: timeRangestart change
	//mode 3: timeRangeEnd change	
	//mode 4: link to range on/off
	//mode 5: timeRangeStartEnd both change
	int $v;
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
	string	$icon=`MG_getShelfIcon smallCam_Icons.bmp`;	
	string	$hicon=`MG_getShelfIcon smallCam_Icons_h.bmp`;
	if($mode==1)
	{
		if(!size(`textField -q -text MG_pathTracker_camTF`))
		{
			MG_camAttachToggleForMacEarly 0;
		}
		if($MacOSBefore2011|| $LinuxBefore2011)MG_camAttachToggleForMacEarly `iconTextCheckBox -q -v MG_pathTracker_lickCamCB`;	
	}
	else if($mode==4)
	{
			if(!$MacOSBefore2011&&! $LinuxBefore2011)
			 {
			    $v = `iconTextCheckBox -q -v MG_pathTracker_linkRangeCB`;			    
    			if($v)
    			{
    				iconTextCheckBox -e -fn "boldLabelFont" MG_pathTracker_linkRangeCB	;
    			}
    			else
    			{
    				iconTextCheckBox -e -fn "plainLabelFont" MG_pathTracker_linkRangeCB	;
    			}
			}
	}	
	string $selItems []=`textScrollList -q -si MG_pathTracker_Obj_TSL`;
	if(!size($selItems))
	{
			return;
	}
	for ($each in $selItems)
	{
		MG_pathTracker_UISetOtherDoit $each 	$mode;
		if($mode==4)
		{MG_pathTracker_TurnOnOffAutoLinkRange  $each $v;}
		if($mode==1){MG_pathTracker_update $each; }
	}	
}
global proc MG_pathTracker_UISetOtherDoit (string $trackNode ,int $mode)
{
	//mode 1: turn on/off cam attachCam
	//mode 2: timeRangeStartstart change
	//mode 3: timeRangeStartEnd change	
	//mode 4: link to range on/off
	//mode 5: timeRangeStartEnd both change
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
    if($mode==1)
	{
		if(!size(`textField -q -text MG_pathTracker_camTF`))
		{
			MG_camAttachToggleForMacEarly 0;
		}
		else
		{
		    MG_pathTracker_recordSingleValue $trackNode "attachToCam" `iconTextCheckBox -q -v MG_pathTracker_lickCamCB`;
		}
	}
	else if($mode==2)
	{
			MG_pathTracker_recordSingleValue $trackNode "StartTime" `floatField -q -v MG_pathTracker_startT_IF`;
	}
	else if($mode==3)
	{
			MG_pathTracker_recordSingleValue $trackNode "EndTime" `floatField -q -v MG_pathTracker_endT_IF`;
	}	
	else if($mode == 4)
	{
		int $v;
		if($MacOSBefore2011|| $LinuxBefore2011)
		{    $v = `checkBox -q -v MG_pathTracker_linkRangeCB`;}
		  else
		{  $v = `iconTextCheckBox -q -v MG_pathTracker_linkRangeCB`;}
		    
			MG_pathTracker_recordSingleValue $trackNode "attachToRange"  $v;
	}	
	else
	{
			MG_pathTracker_recordSingleValue $trackNode "StartTime" `floatField -q -v MG_pathTracker_startT_IF`;
			MG_pathTracker_recordSingleValue $trackNode "EndTime" `floatField -q -v MG_pathTracker_endT_IF`;
	}			
}

global proc MG_camAttachToggleForMacEarly (int $onoff)
{
    global int $MacOSBefore2011;
    global int $LinuxBefore2011;
    if(!$MacOSBefore2011&&! $LinuxBefore2011)
    {
        iconTextCheckBox -e -v $onoff MG_pathTracker_lickCamCB; 
        return;
    }     
	string	$icon=`MG_getShelfIcon smallCam_Icons.bmp`;	
	string	$hicon=`MG_getShelfIcon smallCam_Icons_h.bmp`;
	 if($onoff)
    {    iconTextCheckBox -e -i $hicon MG_pathTracker_lickCamCB; }      
     else
    {  iconTextCheckBox -e -i $icon MG_pathTracker_lickCamCB; } 
    
}
global proc MG_pathTracker_readValueFromTrackgrp (string $trackNode)
{
	global int $MacOSBefore2011;
	global int $LinuxBefore2011;
    string $trackGrpName =($trackNode+"_trackGrp");	
	if(!`objExists $trackGrpName`){return;}
	string $cam="";
	int $attachCam=0,$autoU=1,$pathV=1,$frameV=1,$keyV=1,$attachRange=0;
	float $startT=1,$endT=24,$size=1;
	int $pathC=19,$frameC=18,$keyC=14;
	if(`attributeExists "cam" $trackGrpName`)
	{
		$cam=`getAttr ($trackGrpName+".cam")`;
		textField -e -text $cam MG_pathTracker_camTF;
	}
	if(`attributeExists "attachToCam" $trackGrpName`)
	{
		$attachCam=`getAttr  ($trackGrpName+".attachToCam")`;
		MG_camAttachToggleForMacEarly $attachCam;	
	}	
	if(`attributeExists "StartTime" $trackGrpName`)
	{
		$startT=`getAttr  ($trackGrpName+".StartTime")`;
		floatField -e -v $startT  MG_pathTracker_startT_IF;
	}	
	if(`attributeExists "EndTime" $trackGrpName`)
	{
		$endT=`getAttr ($trackGrpName+".EndTime")`;
		floatField -e -v $endT  MG_pathTracker_endT_IF;	
	}	
	if(`attributeExists "attachToRange" $trackGrpName`)
	{
		$attachRange=`getAttr  ($trackGrpName+".attachToRange")`;
		if($MacOSBefore2011|| $LinuxBefore2011)
		 {   checkBox -e -v $attachRange  MG_pathTracker_linkRangeCB;}
		else   
		 { iconTextCheckBox -e -v $attachRange  MG_pathTracker_linkRangeCB;}
		    
		MG_pathTracker_UISetOtherCommand 4;	
	}	
	if(`attributeExists "PathColor" $trackGrpName`)
	{
		$pathC=`getAttr ($trackGrpName+".PathColor")`;
		colorIndexSliderGrp -e -v $pathC  MG_pathTracker_pathColorCSG;	
	}		
	if(`attributeExists "FramesColor" $trackGrpName`)
	{
		$frameC=`getAttr ($trackGrpName+".FramesColor")`;
		colorIndexSliderGrp -e -v $frameC  MG_pathTracker_FrameColorCSG;	
	}		
	if(`attributeExists "KeysColor" $trackGrpName`)
	{
		$keyC=`getAttr  ($trackGrpName+".KeysColor")`;
		colorIndexSliderGrp -e -v $keyC  MG_pathTracker_KeyColorCSG;	
	}				
	if(`attributeExists "Size" $trackGrpName`)
	{
		$size=`getAttr  ($trackGrpName+".Size")`;
		floatSliderGrp -e -v $size  MG_pathTracker_sizeFSG;	
	}		
}

global proc MG_pathTracker_update (string $transformNode)
{
		string $trackGrpName =($transformNode+"_trackGrp");	
		string $snapShotNode =($transformNode+"_record");	
		if(!`objExists $trackGrpName`)return;
		if(!`objExists $snapShotNode`)return;
		//print "MG_pathTracker_update Invoked!\n";
		string $cam="";
		int $linkCam=0,$autoUpdate=1,$pathV=1,$frameV=1,$keyV=1;
		float $size=1;
		int $pathColor=19,$frameColor=18,$keysColor=14;
		
		if(`attributeExists "autoUpdate" $trackGrpName`)
		{
			$autoUpdate=`getAttr ($trackGrpName+".autoUpdate")`;
			//if(!$autoUpdate)
			//{return;}
		}			
		if(`attributeExists "PathV" $trackGrpName`)
		{
			$pathV=`getAttr ($trackGrpName+".PathV")`;
		}	
		if(`attributeExists "FrameV" $trackGrpName`)
		{
			$frameV=`getAttr ($trackGrpName+".FrameV")`;
		}	
		if(`attributeExists "KeyV" $trackGrpName`)
		{
			$keyV=`getAttr ($trackGrpName+".KeyV")`;
		}						
		if(`attributeExists "cam" $trackGrpName`)
		{
			$cam=`getAttr ($trackGrpName+".cam")`;
		}
		if(`attributeExists "attachToCam" $trackGrpName`)
		{
			$linkCam=`getAttr  ($trackGrpName+".attachToCam")`;
		}	

		if(`attributeExists "attachToRange" $trackGrpName`)
		{
			$linkToRange=`getAttr  ($trackGrpName+".attachToRange")`;
		}	
		if(`attributeExists "PathColor" $trackGrpName`)
		{
			$pathColor=`getAttr ($trackGrpName+".PathColor")`;
		}		
		if(`attributeExists "FramesColor" $trackGrpName`)
		{
			$frameColor=`getAttr ($trackGrpName+".FramesColor")`;
		}		
		if(`attributeExists "KeysColor" $trackGrpName`)
		{
			$keysColor=`getAttr  ($trackGrpName+".KeysColor")`;
		}				
		if(`attributeExists "Size" $trackGrpName`)
		{
			$size=`getAttr  ($trackGrpName+".Size")`;
		}			
		//print "Invoked!\n";
		MG_pathTracker_updateDoIt ($transformNode,$trackGrpName,$snapShotNode,
											$autoUpdate,$pathV,$frameV,$keyV,
											$pathColor,$frameColor,$keysColor,$cam,$linkCam,
											 $size);
	
}
global proc MG_pathTracker_manualUpdateSelection ()
{
	string $sel []=`ls -sl -transforms`;
	if(!size($sel))return;
	string $snapShotNode;
	global int $g_MGCurrentMayaSupportPythonOrNot;
	for($each in  $sel)
	{
		if(!$g_MGCurrentMayaSupportPythonOrNot)
		{
			$snapShotNode = ($each+"_record");
			if(!`objExists $snapShotNode`)
			{
				continue;		
			}
			setAttr ($snapShotNode+".update") 1;			
		}
		MG_pathTracker_update	$each;
	}	
}
global proc Asign_MG_pathTracker_manualUpdateSelection_hotKey (int $mode)
{
	//mode 0: pathTracker tool hotkey
	//mode 1: update tracking hotkey
	if(!`exists "mgtoolConfig"`)
	{
		eval (`MG_sourceCommand "MGtools_config_about_WrittenByMiguel.mel"`);
	}
	mgtoolConfig;
	string $selItem ="PathTracker";
	if($mode)$selItem ="Update_PathTracking";
	textScrollList -e -selectItem $selItem MGConfigNameCommandTSL;
	MG_config_showCommandViaNC;MGtoolsFindHotkeyViaNC;mgHotkeyEditorHotkeyKeyFieldChange;
}

global proc mg_fixPathTrackerFrameOffset()
{
    string $watchers[]=`ls -type "snapshot"`;
    for($watcher in $watchers)
    {
        if(`endsWith  $watcher "_record"`)
        {
            setAttr ($watcher+".increment") 1;
        }
    }
}
//=========lazy source marker proc=========================
global proc pathTracker_WrittenByMiguel()
{
}